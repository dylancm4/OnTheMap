//
//  StudentLocation.swift
//  OnTheMap
//
//  Created by Dylan Miller on 2/17/17.
//  Copyright Â© 2017 Dylan Miller. All rights reserved.
//

import Foundation

// Contains settings for a student location.
class StudentLocation {
    
    // An auto-generated id/key generated by Parse which uniquely identifies a
    // StudentLocation. Example Value: 8ZExGR5uX8
    var objectId: String = ""
    
    // An extra (optional) key used to uniquely identify a StudentLocation.
    // Populate this value using Udacity account ID (user key). Example Value:
    // 1234
    var uniqueKey: String = ""
    
    // The first name of the student which matches their Udacity profile first
    // name. Example Value: John
    var firstName: String = ""
    
    // The last name of the student which matches their Udacity profile last
    // name. Example Value: Doe
    var lastName: String = ""
    
    // The location string used for geocoding the student location. Example
    // Value: Mountain View, CA
    var mapString: String = ""
    
    // The URL provided by the student. Example Value: https://udacity.com
    var mediaUrl: String = ""
    
    // The latitude of the student location (ranges from -90 to 90). Example
    // Value: 37.386052
    var latitude: Double = 0.0
    
    // The longitude of the student location (ranges from -180 to 180). Example
    // Value: -122.083851
    var longitude: Double = 0.0
    
    // The date when the student location was created. Example Value: Feb 25,
    // 2015, 01:10
    var createdAt: Date = Date()
    
    // The date when the student location was last updated. Example Value: Mar
    // 09, 2015, 23:34
    var updatedAt: Date = Date()
    
    // Global array of student locations.
    static var studentLocations: [StudentLocation] = [StudentLocation]()
    
    // Create a StudentLocation object based on the specified parameters.
    init(objectId: String, userKey: String, firstName: String, lastName: String, mapString: String, mediaUrl: String, latitude: Double, longitude: Double) {
        
        self.objectId = objectId
        self.uniqueKey = userKey
        self.firstName = firstName
        self.lastName = lastName
        self.mapString = mapString
        self.mediaUrl = mediaUrl
        self.latitude = latitude
        self.longitude = longitude
    }
    
    // Create a StudentLocation object based on the specified dictionary.
    init(studentLocationDict: [String:AnyObject]) {
        
        if let objectId = studentLocationDict[ParseClient.JsonResponseKeys.objectId] as? String {
            
            self.objectId = objectId
        }
        if let uniqueKey = studentLocationDict[ParseClient.JsonResponseKeys.uniqueKey] as? String {
            
            self.uniqueKey = uniqueKey
        }
        if let firstName = studentLocationDict[ParseClient.JsonResponseKeys.firstName] as? String {
            
            self.firstName = firstName
        }
        else {
            
            self.firstName = "[No First Name]"
        }
        if let lastName = studentLocationDict[ParseClient.JsonResponseKeys.lastName] as? String {
            
            self.lastName = lastName
        }
        else {
            
            self.lastName = "[No Last Name]"
        }
        if let mapString = studentLocationDict[ParseClient.JsonResponseKeys.mapString] as? String {
            
            self.mapString = mapString
        }
        if let mediaUrl = studentLocationDict[ParseClient.JsonResponseKeys.mediaUrl] as? String {
            
            self.mediaUrl = mediaUrl
        }
        else {
            
            self.mediaUrl = "[No Media URL]"
        }
        if let latitude = studentLocationDict[ParseClient.JsonResponseKeys.latitude] as? Double {
            
            self.latitude = latitude
        }
        if let longitude = studentLocationDict[ParseClient.JsonResponseKeys.longitude] as? Double {
            
            self.longitude = longitude
        }
        if let createdAt = studentLocationDict[ParseClient.JsonResponseKeys.createdAt] as? Date {
            
            self.createdAt = createdAt
        }
        if let updatedAt = studentLocationDict[ParseClient.JsonResponseKeys.updatedAt] as? Date {
            
            self.updatedAt = updatedAt
        }
    }
    
    // Set up the static array of StudentLocation objects based on the specified
    // array of dictionaries.
    static func setStudentLocations(results: [[String:AnyObject]]) {
    
        studentLocations.removeAll()
        for studentLocationDict in results {
            
            let studentLocation = StudentLocation(studentLocationDict: studentLocationDict)
            studentLocations.append(studentLocation)
        }
    }
}

